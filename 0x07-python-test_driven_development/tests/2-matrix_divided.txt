========================================
Doc-test for the Matrix_divided function
========================================

First import the function "matrix_divided" function
>>> matrix_divided = __import__('2-matrix_divided').matrix_divided

Define the list(list()) "matrix"
>>> matrix = [
...	[1, 2, 3],
...	[4, 5, 6]
... ]

Test function with regular positive integer "div":
>>> print(matrix_divided(matrix, 3))
[[0.33, 0.67, 1.0], [1.33, 1.67, 2.0]]

Testing if "matrix" is edited:
>>> print(matrix)
[[1, 2, 3], [4, 5, 6]]

Testing when "matrix" contains objects besides lists:
>>> matrix = [[1, 2, 3], "fish"]
>>> print(matrix_divided(matrix, 3))
Traceback (most recent call last):
TypeError: matrix must be a matrix (list of lists) of integers/floats

Testing when "matrix" contains row of different lengths:
>>> matrix = [[1, 2, 4], [1, 3]]
>>> print(matrix_divided(matrix, 3))
Traceback (most recent call last):
TypeError: Each row of the matrix must have the same size

Testing when one or more of the elements in the matrix is not an
int or float:
>>> matrix = [[1, "fish", 2], [3, 4, 5]]
>>> print(matrix_divided(matrix, 3))
Traceback (most recent call last):
TypeError: matrix must be a matrix (list of lists) of integers/floats

Testing when "div" is zero:
>>> matrix = [[1, 2, 3]]
>>> print(matrix_divided(matrix, 0))
Traceback (most recent call last):
ZeroDivisionError: division by zero

Testing when matrix is an empty list:
>>> matrix = []
>>> print(matrix_divided(matrix, 1))
[]
