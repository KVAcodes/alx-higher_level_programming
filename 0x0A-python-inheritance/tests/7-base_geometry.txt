Test Suite for 7-base_geometry.py module.
=========================================

firstly import class:
>>> BaseGeometry = __import__('7-base_geometry').BaseGeometry

instantiate:
>>> bg = BaseGeometry()

Tests for integer value:
========================
No exception should be raised
>>> bg.integer_validator("my_int", 12)
>>> bg.integer_validator("width", 89)

Test 1:
========
	>>> try:
	...     bg.integer_validator("name", "John")
	... except Exception as e:
	...     print("[{}] {}".format(e.__class__.__name__, e))
	...
	[TypeError] name must be an integer
	
	
Test 2:
=======
	>>> try:
	...     bg.integer_validator("age", 0)
	... except Exception as e:
	...     print("[{}] {}".format(e.__class__.__name__, e))
	...
	[ValueError] age must be greater than 0
	
Test 3:
=======
	>>> try:
	...     bg.integer_validator("distance", -4)
	... except Exception as e:
	...     print("[{}] {}".format(e.__class__.__name__, e))
	...
	[ValueError] distance must be greater than 0

Test 4:
=======
	>>> try:
	...     bg.integer_validator("distance")
	... except Exception as e:
	...     print("[{}] {}".format(e.__class__.__name__, e))
	...
	[TypeError] integer_validator() missing 1 required positional argument: 'value'
	
Test 5:
=======
	>>> try:
	...     bg.integer_validator()
	... except Exception as e:
	...     print("[{}] {}".format(e.__class__.__name__, e))
	...
	[TypeError] integer_validator() missing 2 required positional arguments: 'name' and 'value'
	
Test 6:
=======
	>>> try:
	...     bg.area()
	... except Exception as e:
	...     print("[{}] {}".format(e.__class__.__name__, e))
	...
	[Exception] area() is not implemented
	>>>
